Human Record N Replay - HRNR

It is based on OMNIPLAY@db1792f9947926776f0f7718a7c35cbf91dac6f2 when x-proxy and replay pause were supported.

-----------------------------------------------------------------
Create Ubuntu VM
-----------------------------------------------------------------
Download 12.04.2 LTS Ubuntu Linux 32-bit distribution for i386 processor:
  
  http://old-releases.ubuntu.com/releases/12.04.2/ubuntu-12.04.2-desktop-i386.iso

On Intel CPU PC, use VMWare Workstation Player to create a VM with 40G disk space, 4G memory, Bridged Network(replicate physical network connection state)

Login into VM and install ssh server, it will start ssh server after installation:

  sudo apt-get install openssh-server
  sudo lsof -i -P -n | grep LISTEN (check if it is running)

Find out VM’s IP address:

  ifconfig

-----------------------------------------------------------------
Build omniplay modified linux kernel
-----------------------------------------------------------------
From your PC, ssh to VM:

  ssh username@ip-addr

Install git:

  sudo apt-get install git

Under user’s home directory, check out code from github:

  git clone https://github.com/alanfl/hrnr.git

Setup env variables:

  cd ~/hrnr/scripts
  sudo ./setup.sh
  source ~/.omniplay_setup

Install libraries:

  sudo apt-get install libncurses5-dev libncursesw5-dev

Setup kernel config for build:

  cd ~/hrnr/linux-lts-quantal-3.5.0
  make menuconfig (make sure terminal window size is at least 19x80)
  Press ESC, ESC (quickly) and save the .config file
  Update .config file, “CONFIG_RTS5139=m” to “CONFIG_RTS5139=n”

Build linux kernel:

  sudo ./compile (be patient, may last 2 hours, rerun if failed)
  sudo make modules_install
  sudo make install
  sudo make headers_install INSTALL_HDR_PATH=$OMNIPLAY_DIR/test/replay_headers

Add the following to ~/.profile file:

  export OMNIPLAY_DIR=~/hrnr
  cd $OMNIPLAY_DIR

Note the original linux version then reboot with new kernel:

  uname -r (3.5.0-23-generic)
  reboot

Note new linux kernel version:

  uname -r (3.5.7.13)
  
-----------------------------------------------------------------
Build modified glibc
-----------------------------------------------------------------

Dependencies:

  sudo apt-get install gawk texinfo autoconf gettext

One-time configure:

  cd $OMNIPLAY_DIR/eglibc-2.15/
  mkdir build
  mkdir prefix
  cd build
  LD_LIBRARY_PATH="" ../configure -prefix=$OMNIPLAY_DIR/eglibc-2.15/prefix --disable-profile --enable-add-on --without-gd --without-selinux --without-cvs --enable-kernel=3.2.0
  sudo mkdir /var/db
  sudo chown $USER /var/db
  mkdir ../prefix/etc/
  touch ../prefix/etc/ld.so.conf

To build/install:

  cd $OMNIPLAY_DIR/eglibc-2.15/build
  LD_LIBRARY_PATH="" make
  LD_LIBRARY_PATH="" make install

Also, run some misc fixups (once):

  LD_LIBRARY_PATH="" cd $OMNIPLAY_DIR/eglibc-2.15/prefix/lib
  LD_LIBRARY_PATH="" ln -s /usr/lib/locale

-----------------------------------------------------------------
Building test tools
-----------------------------------------------------------------

To build the tools (no installation, depends on the headers_install when building kernel)
  sudo apt-get install g++
  cd $OMNIPLAY_DIR/test/dev
  make
  cd ..
  make

Add the following to ~/.profile file: (.profile will be execed for ssh client, but NOT by GUI terminal)

  export LIBPATH=/lib/i386-linux-gnu:/usr/lib/i386-linux-gnu:/usr/local/lib:/usr/lib:/lib
  sudo -E $OMNIPLAY_DIR/scripts/insert_spec.sh (ONLY add this line at this point)
  
-----------------------------------------------------------------
Validate the build
-----------------------------------------------------------------

Reconnect all ssh clients.

Record userspace and kernel space non-deterministics:
  From one terminal window
  cd $OMNIPLAY_DIR/test
  ./xreset.sh
  ./xrun.sh “/bin/nano hello.txt” (type something then exit)
  Output should be: Record log save to: /replay_logdb/rec-1

Replay previous recorded (it will NOT really rerun the program):
  Open another terminal (must be a different terminal window)
  cd $OMNIPLAY_DIR/test
  ./xrerun.sh 1
  Output should be: Goodby! Cruel lmap. This replay is over.
  
-----------------------------------------------------------------
Install pin and build pin-tools
-----------------------------------------------------------------

Pin is used to instrument code in replay and generate linkage output, using self-defined linkage functions. Linkage function is kind of callback function that Pin will invoke to intercept each instruction.)

Install Pin and pintool required libraries:
  cd (go to user home dir)
  cp $OMNIPLAY_DIR/pin-2.14-71313-gcc.4.4.7-linux.tar.gz .
  tar -xzf pin-2.14-71313-gcc.4.4.7-linux.tar.gz
  mv pin-2.14-71313-gcc.4.4.7-linux pin-2.13 (system default pin root, you can specify another one by setting pin_root)
  cd $OMNIPLAY_DIR/pin_tools
  sudo apt-get install libglib2.0-dev libssl-dev

Build or rebuild pintools:
  rm -rf obj-ia32 (rm previous build)
  make PIN_ROOT=~/pin-2.13
  ls obj-ia32 (make sure linkage_copy.so and linkage_data.so are there)

Optional required if checked out latest from ddevec/omniplay:
  *** Fix linkage.cpp and makefile.rules
  nano linkage.cpp and search (ctrl+w set_pin_addr)
  Add two lines of code:
    int thread_ndx;
    struct thread_data *current_thread;
  Change one line:
    set_pin_addr (dev_fd, (u_long) &(ptdata->app_syscall), ptdata, (void **) &current_thread, &thread_ndx);

  *** fix makefile.rules (to build linkage_copy.so and linkage_data.so)
    nano makefile.rules and add the following to TEST_TOOL_ROOTS variable: linkage_copy linkage_data

-----------------------------------------------------------------
Build logdb & install sqlite3
-----------------------------------------------------------------

logdb has python scripts that automate querying file changes. It replay processes and use pin tools for taint tracking.

	cd $OMNIPLAY_DIR/logdb
	sudo apt-get install python-dev sqlite3
	cd ../python_environ/omniplay
	make
	sudo make install (install parseklograw package)

Validate logdb and sqlite3

	After record something
	python fill_db.py -s 1 
	sqlite3 /replay_logdb/replay.db
	sqlite> .tables (see all tables)
	sqlite> SELECT * FROM replays;
	Ctrl + d (exit sqlite3) 


-----------------------------------------------------------------
Demo & Validation
-----------------------------------------------------------------

Record userspace and kernel space non-deterministics:
  Open one ssh session
  cd $OMNIPLAY_DIR/test
  ./xreset.sh
  ./xrun.sh “/bin/bash” (all commands in the shell will be recorded)
  nano hello.txt
  cp hello.txt h1.txt
  cp h1.txt h2.txt
  cp h2.txt h3.txt
  exit
  Output should be: Record log save to: /replay_logdb/rec-1

Query file provenance:
  Open another ssh session (must be a different terminal window)
  cd $OMNIPLAY_DIR/test
  ./xquery.sh h3.txt
  Output should be: Query took 146.136988 sec
  {'read_infos': [], 'cmd': u'nano hello.txt', 'pid': 10533, 'edges': [<ipc.IPCEdge object at 0xb6de85ec>, <ipc.IPCEdge object at 0xb6de864c>], 'exec_infos': [], 'write_infos': [<opinfo.WriteInfo object at 0xb6de840c>, <opinfo.WriteInfo object at 0xb6de836c>], 'edges_to': [], 'group_id': 23}
  cat /tmp/output.dot, will get something like below:
	digraph G {
	"Group 27 Pid 10537\ncp h2.txt h3.txt" [shape=box];
	"Group 26 Pid 10536\ncp h1.txt h2.txt" [shape=box];
	"Group 24 Pid 10534\ncp hello.txt h1.txt" [shape=box];
	"Group 23 Pid 10533\nnano hello.txt" [shape=box];
	"Group 26 Pid 10536\ncp h1.txt h2.txt" -> "Group 27 Pid 10537\ncp h2.txt h3.txt"  [color=green];
	"Group 26 Pid 10536\ncp h1.txt h2.txt" -> "Group 27 Pid 10537\ncp h2.txt h3.txt"  [color=green];
	"Group 24 Pid 10534\ncp hello.txt h1.txt" -> "Group 26 Pid 10536\ncp h1.txt h2.txt"  [color=green];
	"Group 24 Pid 10534\ncp hello.txt h1.txt" -> "Group 26 Pid 10536\ncp h1.txt h2.txt"  [color=green];
	"Group 23 Pid 10533\nnano hello.txt" -> "Group 24 Pid 10534\ncp hello.txt h1.txt"  [color=green];
	"Group 23 Pid 10533\nnano hello.txt" -> "Group 24 Pid 10534\ncp hello.txt h1.txt"  [color=green];
	} 
  open browser and go to https://dreampuf.github.io/GraphvizOnline/ (copy content of .dot file will get graph)
  
  
